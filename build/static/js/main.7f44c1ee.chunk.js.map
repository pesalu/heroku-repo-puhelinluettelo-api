{"version":3,"sources":["service/person-service.js","App.js","index.js"],"names":["url","getPersons","axios","get","then","response","data","person","post","personId","delete","put","Message","message","style","className","Filter","searchTextChangeHandler","newSearchQuery","value","onChange","Persons","persons","removePerson","map","key","id","name","phone","number","Person","onClick","PersonForm","submissionHandler","handleNameChange","handlePhoneNumberChanges","newName","newPhoneNumber","onSubmit","type","App","useState","setPersons","setNewName","setNewPhoneNumber","newSearchQueryText","setNewSearchQueryText","errorMessage","setErrorMessage","newMessage","setMessage","useEffect","personService","event","target","preventDefault","newPerson","existingPerson","find","window","confirm","updatedPerson","setTimeout","catch","error","concat","filter","toLowerCase","includes","filteredPersonList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f44c1ee.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst url = '/api/persons';\n\nconst getPersons = () => {\n    return axios.get(url)\n        .then(response => response.data);\n}\n\nconst personByNameExist = (name) => {\n    return getPersons().then(\n        persons => persons.find(person => person.name === name)\n    );\n}\n\nconst addPerson = (person) => {\n  return axios.post(url, person)\n    .then(response => response.data);\n}\n\nconst deletePerson = (personId) => {\n    return axios.delete(url + '/' + personId)\n        .then(response => response.data);\n}\n\nconst updatePerson = (personId, person) => {\n  return axios.put(url + '/' + personId, person)\n    .then(response => response.data);\n}\n\nexport default {\n    getPersons,\n    addPerson,\n    deletePerson,\n    updatePerson,\n    personByNameExist\n}","import React, { useState, useEffect } from 'react'\nimport personService from './service/person-service'\nimport './index.css'\n// //\n// Riittää että erotat sovelluksesta kolme komponenttia. Hyviä kandidaatteja ovat esim. filtteröintilomake, uuden henkilön lisäävä lomake, kaikki henkilöt renderöivä komponentti sekä yksittäisen henkilön renderöivä komponentti.\n\n// Sovelluksen juurikomponentti voi näyttää refaktoroinnin jälkeen suunnilleen seuraavalta, eli se ei itse renderöi suoraan oikeastaan mitään muita kuin otsikkoja:\n\nconst Message = ({message, style}) => {\n  if (message === null || message === 'something happened...') return null;\n  if (style === null) style = 'message';\n\n  return (<div className={style}>{message}</div>)\n}\n\nconst Filter = ({searchTextChangeHandler, newSearchQuery}) => {\n    return (\n        <div>\n            Filter: <input value={newSearchQuery} onChange={searchTextChangeHandler}></input>\n        </div>\n    )\n}\n\nconst Persons = ({persons, removePerson}) => {\n  return persons.map((person) => \n    <Person key={person.id} \n            name={person.name} \n            phone={person.number} \n            removePerson={() => removePerson(person.id)}\n    />);\n}\n\nconst Person = ({name, phone, removePerson}) => {\n    return (<div>{name} {phone} <button onClick={removePerson}>Poista</button></div>)\n}\n\nconst PersonForm = ({submissionHandler, handleNameChange, handlePhoneNumberChanges, newName, newPhoneNumber}) => {\n    return (\n        <form onSubmit={submissionHandler}>\n            <div>\n                name: <input value={newName} onChange={handleNameChange}/>\n            </div>\n            <div>\n                number: <input value={newPhoneNumber} onChange={handlePhoneNumberChanges}/>\n            </div>\n            <div>\n                <button type=\"submit\" >add</button>\n            </div>\n        </form>\n    );\n\n}\n\n\nconst App = () => {\n\n  const [ persons, setPersons ] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newPhoneNumber, setNewPhoneNumber ] = useState('');\n  const [ newSearchQueryText, setNewSearchQueryText ] = useState('');\n  const [ errorMessage, setErrorMessage ] = useState(null);\n  const [ newMessage, setMessage ] = useState(null);\n\n  const hook = () => {\n    personService.getPersons()\n        .then(persons => setPersons(persons))\n  }\n  useEffect(hook, []);\n\n  const filteredPersonList = (persons) => {\n    if (!newSearchQueryText) return persons;\n    return persons.filter(person => person.name.toLowerCase().includes(newSearchQueryText) || person.number.toLowerCase().includes(newSearchQueryText));\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault(); \n\n    let newPerson = {\n        name: newName,\n        number: newPhoneNumber,\n    };\n\n    let existingPerson = persons.find(person => person.name === newName);\n    if (existingPerson) {\n      if (window.confirm('Haluatko muuttaa puhelinnumeron?')) {\n        personService\n          .updatePerson(existingPerson.id, {...existingPerson, number: newPhoneNumber})\n          .then(updatedPerson => {\n              setPersons( persons.map( person => person.id !== updatedPerson.id ? person : updatedPerson ) );\n              setNewName('');\n              setNewPhoneNumber('');\n              setMessage('Person updated!');\n              setTimeout(() => setMessage(null), 5000);\n          })\n          .catch(error => {\n            setErrorMessage('Updating person ' + newPerson.name + ' failed. Person is already removed.' );\n            setTimeout(() => setErrorMessage(null), 5000);\n          });\n      }\n    } else {\n      personService.addPerson(newPerson)\n        .then(person => {\n          setPersons(persons.concat(person));\n          setNewName('');\n          setNewPhoneNumber('');\n          setMessage( 'Person added!' );\n          setTimeout(() => setMessage(null), 5000);\n        })\n        .catch(error => {\n          setErrorMessage(error.response.data);\n          setTimeout(() => setErrorMessage(null), 5000);\n        });\n    }\n\n  };\n\n  const removePerson = (personId) => {\n    if (window.confirm('Haluatko varmasti poistaa?')) {\n      personService.deletePerson(personId)\n        .then( response => {\n          setPersons( persons.filter( person => person.id !== personId ) )\n          setMessage( 'Person removed!' );\n          setTimeout(() => setMessage(null), 5000);\n        } )\n    }\n  }\n\n  const handleNameChange = (event) => setNewName(event.target.value);\n  const handlePhoneNumberChanges = (event) => setNewPhoneNumber(event.target.value);\n  const searchTextChangeHandler = (event) => setNewSearchQueryText(event.target.value);\n\n  return (\n    <div>\n        <h1>Phonebook</h1>\n        <Message message={errorMessage} style='error-message' />\n        <Message message={newMessage}  style='message' />\n        <h2>Search by name or number</h2>\n        <Filter searchTextChangeHandler={searchTextChangeHandler} newSearchQuery={newSearchQueryText}></Filter>\n        <h2>Add new person</h2>\n        <PersonForm submissionHandler={addPerson} \n                    handleNameChange={handleNameChange} \n                    handlePhoneNumberChanges={handlePhoneNumberChanges} \n                    newName={newName} \n                    newPhoneNumber={newPhoneNumber}>\n        </PersonForm>\n        <h2>Persons</h2>\n        <Persons persons={filteredPersonList(persons)} removePerson={removePerson}></Persons>\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}